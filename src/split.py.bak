from textnode import TextType, TextNode  # Assuming these are defined in text_type.py

def split_nodes_delimiter(old_nodes, delimiter, text_type):
    """
    Splits the text nodes in the old_nodes list based on the provided delimiter
    and the specified text_type. The function creates new TextNode instances for each 
    part of the text split by the delimiter.

    Args:
    - old_nodes (list): A list of TextNode objects to be processed.
    - delimiter (str): The delimiter to split the text by.
    - text_type (TextType): The type of text to split (e.g., TextType.CODE, TextType.BOLD, etc.)

    Returns:
    - list: A new list of TextNode objects, with the text split according to the delimiter.
    
    Raises:
    - ValueError: If an unmatched delimiter is found in the text.
    """
    
    new_nodes = []
    
    for node in old_nodes:
        if node.text_type != TextType.TEXT:
            new_nodes.append(node)
            continue
        
        # Split the text using the delimiter
        parts = node.text.split(delimiter)
        
        # Check for unmatched delimiter (odd number of parts means unmatched)
        if len(parts) % 2 != 1:
            raise ValueError(f"Unmatched delimiter: {delimiter}")

        if len(parts) == 1:
            # No delimiter found, just append the original node
            new_nodes.append(node)
            continue
        
        # Now we have at least one split, alternate the node types
        for i, part in enumerate(parts):
            if i % 2 == 0:
                # Even parts are regular text
                new_nodes.append(TextNode(part, TextType.TEXT))
            else:
                # Odd parts are the specified text type (e.g., CODE, BOLD, ITALIC)
                new_nodes.append(TextNode(part, text_type))
        # If the text ends with a delimiter, append an empty TextNode for the remaining part
        if parts[-1] == "":
            new_nodes.append(TextNode("", TextType.TEXT))  # Add a blank part to close properly

    return new_nodes
